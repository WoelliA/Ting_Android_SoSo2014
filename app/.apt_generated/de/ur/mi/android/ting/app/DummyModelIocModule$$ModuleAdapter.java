// Code generated by dagger-compiler.  Do not edit.
package de.ur.mi.android.ting.app;

import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class DummyModelIocModule$$ModuleAdapter extends ModuleAdapter<DummyModelIocModule> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public DummyModelIocModule$$ModuleAdapter() {
    super(de.ur.mi.android.ting.app.DummyModelIocModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  @Override
  public DummyModelIocModule newModule() {
    return new de.ur.mi.android.ting.app.DummyModelIocModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, DummyModelIocModule module) {
    bindings.contributeProvidesBinding("de.ur.mi.android.ting.model.ICategoryProvider", new ProvideICategoryProviderProvidesAdapter(module));
    bindings.contributeProvidesBinding("de.ur.mi.android.ting.model.IArticleProvider", new ProvideIArticleProviderProvidesAdapter(module));
  }

  /**
   * A {@code Binding<de.ur.mi.android.ting.model.ICategoryProvider>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<de.ur.mi.android.ting.model.ICategoryProvider>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideICategoryProviderProvidesAdapter extends ProvidesBinding<de.ur.mi.android.ting.model.ICategoryProvider>
      implements Provider<de.ur.mi.android.ting.model.ICategoryProvider> {
    private final DummyModelIocModule module;

    public ProvideICategoryProviderProvidesAdapter(DummyModelIocModule module) {
      super("de.ur.mi.android.ting.model.ICategoryProvider", NOT_SINGLETON, "de.ur.mi.android.ting.app.DummyModelIocModule", "provideICategoryProvider");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<de.ur.mi.android.ting.model.ICategoryProvider>}.
     */
    @Override
    public de.ur.mi.android.ting.model.ICategoryProvider get() {
      return module.provideICategoryProvider();
    }
  }

  /**
   * A {@code Binding<de.ur.mi.android.ting.model.IArticleProvider>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<de.ur.mi.android.ting.model.IArticleProvider>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideIArticleProviderProvidesAdapter extends ProvidesBinding<de.ur.mi.android.ting.model.IArticleProvider>
      implements Provider<de.ur.mi.android.ting.model.IArticleProvider> {
    private final DummyModelIocModule module;

    public ProvideIArticleProviderProvidesAdapter(DummyModelIocModule module) {
      super("de.ur.mi.android.ting.model.IArticleProvider", NOT_SINGLETON, "de.ur.mi.android.ting.app.DummyModelIocModule", "provideIArticleProvider");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<de.ur.mi.android.ting.model.IArticleProvider>}.
     */
    @Override
    public de.ur.mi.android.ting.model.IArticleProvider get() {
      return module.provideIArticleProvider();
    }
  }
}
